Traceback (most recent call last):
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\claud\anaconda3\envs\ml_venv\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def doublesmooth_statsmodels(y, alpha, beta, initialization_method="estimated"):
    if len(y) == 0:
        raise ValueError("La serie de entrenamiento est√° vac√≠a.")
    
    # Configurar el modelo Holt con tendencia lineal (no estacional)
    model = Holt(y, exponential=False, damped_trend=False, initialization_method=initialization_method)
    
    # Ajustar el modelo con los par√°metros alpha y beta
    fitted_model = model.fit(smoothing_level=alpha, smoothing_slope=beta, optimized=False)
    
    # Obtener los valores suavizados (fitted values)
    ytilde = fitted_model.fittedvalues
    return ytilde, fitted_model

# Funci√≥n para generar predicciones basadas en DES usando statsmodels
def des_forecast_statsmodels(train, val_length, alpha, beta, initialization_method="estimated"):
    # Aplicar DES al conjunto de entrenamiento
    ytilde, fitted_model = doublesmooth_statsmodels(train, alpha, beta, initialization_method)
    
    if len(ytilde) == 0:
        raise ValueError("La serie suavizada est√° vac√≠a.")
    
    # Generar predicciones para el conjunto de validaci√≥n
    forecast = fitted_model.forecast(val_length)
    y_pred = forecast.tolist()
    return y_pred

# Optimizador DES con verificaci√≥n de datos usando statsmodels
def des_optimizer_statsmodels(train, val, alphas, betas, initialization_method="estimated"):
    best_alpha, best_beta, best_mae = None, None, float("inf")
    for alpha in alphas:
        for beta in betas:
            try:
                y_pred = des_forecast_statsmodels(train, len(val), alpha, beta, initialization_method)
                mae = mean_absolute_error(val, y_pred)
                if mae < best_mae:
                    best_alpha, best_beta, best_mae = alpha, beta, mae
            except Exception as e:
                # Manejar posibles excepciones, por ejemplo, par√°metros no v√°lidos
                print(f"Error con alpha={alpha}, beta={beta}: {e}")
                continue
    return best_alpha, best_beta, best_mae

# Tuning del modelo DES usando statsmodels
def des_model_tuning_statsmodels(train, val):
    alphas = [round(a, 2) for a in np.arange(0.1, 1.0, 0.1)]
    betas = [round(b, 2) for b in np.arange(0.1, 1.0, 0.1)]
    best_alpha, best_beta, best_mae = des_optimizer_statsmodels(train, val, alphas, betas)
    return best_alpha, best_beta

# ENTRENAMIENTO 

best_params = []

for window in windows:
    train, val, test = train_val_test(timeserie, window)
    best_alpha, best_beta = des_model_tuning_statsmodels(train,val)
    best_params.append({'window': window, 'alpha': best_alpha, 'beta' : best_beta})
    
for param in best_params:
    display(HTML(f'<p style="color: black; font-size: 18px;">Resultados de entrenamiento para ventana de: {param["window"]}</p>'))
    #pred = firstsmooth(train,param['alpha'])
    pred = des_forecast(train,len(train),param['alpha'],param['beta'])
    residuals = pred - train
    metrics = forecast_accuracy(pred,train, 'train', 'DSE',[10],window_str= param['window'])
    model_summary = pd.concat([model_summary, metrics])
    display(HTML(f'<p style="color: black; font-size: 18px;">Metricas</p>'))
    print(metrics)
    independence_normality(residuals,nlags_ljbox=10)
    
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[11], line 63[0m
[0;32m     61[0m display(HTML([38;5;124mf[39m[38;5;124m'[39m[38;5;124m<p style=[39m[38;5;124m"[39m[38;5;124mcolor: black; font-size: 18px;[39m[38;5;124m"[39m[38;5;124m>Resultados de entrenamiento para ventana de: [39m[38;5;132;01m{[39;00mparam[[38;5;124m"[39m[38;5;124mwindow[39m[38;5;124m"[39m][38;5;132;01m}[39;00m[38;5;124m</p>[39m[38;5;124m'[39m))
[0;32m     62[0m [38;5;66;03m#pred = firstsmooth(train,param['alpha'])[39;00m
[1;32m---> 63[0m pred [38;5;241m=[39m [43mdes_forecast[49m(train,[38;5;28mlen[39m(train),param[[38;5;124m'[39m[38;5;124malpha[39m[38;5;124m'[39m],param[[38;5;124m'[39m[38;5;124mbeta[39m[38;5;124m'[39m])
[0;32m     64[0m residuals [38;5;241m=[39m pred [38;5;241m-[39m train
[0;32m     65[0m metrics [38;5;241m=[39m forecast_accuracy(pred,train, [38;5;124m'[39m[38;5;124mtrain[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mDSE[39m[38;5;124m'[39m,[[38;5;241m10[39m],window_str[38;5;241m=[39m param[[38;5;124m'[39m[38;5;124mwindow[39m[38;5;124m'[39m])

[1;31mNameError[0m: name 'des_forecast' is not defined

